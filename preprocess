# remove certain column
exprM2 <- exprM[,-(1:2)]
rownames(exprM2) = exprM[,1]

# remove low expression transcript/probe
exprMatrix[apply(exprMatrix[,-1],1,function(X) length(X[X>=5])>0 ),] # remove row without counts >= 5
countTable <- countTable[rowSums(countTable) > 0, ].  # remove rowsum == 0

# log transformation
setwd("/Users/yuliu/Bladder/publicData")
data <- read.csv("non_normalized_data.csv",header=T, row.names=1)
data[data<=0] = 0
data_log <- log(data + 1, 2)
boxplot(data_log)
write.csv(data_log, file="log_transformed.csv")

# remove column from dataframe by column name
subdf = subset(gse69795_log, select = -c(MDA_FFPE87) )

# normalization
library(preprocessCore)
setwd("/Users/yuliu/Bladder/publicData")
data <- read.csv("non_normalized_data.csv",header=T)
head(data)
rownames(data) <- data[,1]
data_mat <- data.matrix(data[,-1]) 
head(data_mat)
data_norm <- normalize.quantiles(data_mat, copy = TRUE)
rownames(expr_norm) = rownames(expr_raw)
colnames(expr_norm) = colnames(expr_raw)
pdf("after_norm.pdf")
boxplot(data_norm)
dev.off()
write.csv(data_norm, file="quantile_norm.csv")

# convert to gene symbol
library("illuminaHumanv4.db")
data <- read.csv("quantile_norm2.csv", header=T, row.names=1)
symbols <- mapIds(illuminaHumanv4.db, rownames(data), "SYMBOL","PROBEID")
write.csv(as.data.frame(symbols), file="geneSymbolMap.csv")

library(annotate) # not sure if it is necessary
library("org.Hs.eg.db")
a  <- read.csv("nodes_95.txt", header=F, row.names=1)
symbols <- mapIds(org.Hs.eg.db,  rownames(a), "SYMBOL", 'ENTREZID')


# select the probe with max expression as gene expression
mydat <- read.table("quantile_norm3_gene_symbol2.csv", header = T, sep = ",", row.names = NULL)
mydat.max <- aggregate(. ~ symbols, data = mydat, max)
head(mydat.max)
write.csv(mydat.max, file="quantile_norm3_gene_symbol3.csv", row.names=FALSE)

# intersect of two tables
gg<-intersect(rownames(BLCA),rownames(exprM))
head(BLCA[gg,])



setwd("/Users/yuliu/Bladder_ML/resource")
gse48276 <- read.csv("GSE48276_exprM_init.csv", header=T, row.names=1)
gse48276[gse48276<=0] = 0
gse48276_log <- log(gse48276 + 1, 2)
boxplot(gse48276_log)
library(preprocessCore)
gse48276_mat <- as.matrix(gse48276_log)
gse48276_norm <- normalize.quantiles(gse48276_mat, copy = TRUE)
boxplot(gse48276_norm)
row.names(gse48276_norm) <- row.names(gse48276)
colnames(gse48276_norm) <- colnames(gse48276)
write.csv(gse48276_norm, file="GSE48276_norm.csv", row.names=T)

library('biomaRt')
mart = useDataset("hsapiens_gene_ensembl", useEnsembl(biomart="ensembl"))
mart = useDataset("hsapiens_gene_ensembl", useEnsembl(biomart="ensembl", version=75))
G <- read.csv("MMRF_CoMMpass_IA13a_E74GTF_Salmon_V7.2_Filtered_Gene_TPM.txt", header=T, row.names=1,check.names=F, sep="\t")
genes <- rownames(G)
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id","hgnc_symbol"),values=genes,mart= mart)
head(G_list)                                                        
write.csv(G_list, file="mapping_ensg_symb.csv", row.names=F)
 


library(preprocessCore)
data <- read.csv("MMRF_coMMpass_Gene_counts_symbol.txt", sep="\t",  header=T, row.names=NULL, check.names=F)
data.max <- aggregate(. ~ GENE_ID, data = data, max)
rownames(data.max) <- data.max[,1]
data_mat <- data.matrix(data.max[,-1])
data_log <- log(data_mat + 1, 2)
data_norm <- normalize.quantiles(data_log, copy = TRUE)
rownames(data_norm) = rownames(data.max)
colnames(data_norm) = colnames(data[,-1])
write.csv(data_norm, file="MMRF_coMMpass_Gene_counts_symbol_log_norm.csv")


## using genes with max expresssion from ENSG
## remove lowly expressed gene: half of sample == 0
exprM <- read.csv("MMRF_CoMMpass_IA13a_E74GTF_Salmon_Gene_symbol_TPM.csv", header=T, check.names=F)
exprM.max <- aggregate(. ~ Symbol, data = exprM, max)
write.csv(exprM.max, file="MMRF_CoMMpass_IA13a_E74GTF_Salmon_unique_Gene_symbol_TPM.csv", row.names=FALSE)

### https://www.biostars.org/p/377059/
count <- read.csv("count.txt",sep = "\t",header = T,row.names=1)
head(count)
#Remove rows if count is < zero in 50% of sample
rem <- function(x){
  x <- as.matrix(x)
  x <- t(apply(x,1,as.numeric))
  r <- as.numeric(apply(x,1,function(i) sum(i == 0) ))
  remove <- which(r > dim(x)[2]*0.5)
  return(remove)
}
remove <- rem(count)
countdata <- count[-remove,]
###

exprM2 <- read.csv("MMRF_CoMMpass_IA13a_E74GTF_Salmon_unique_Gene_symbol_TPM_.csv", header = T,row.names=1)
remove <- rem(exprM2)
length(remove)
exprM3 <- exprM2[-remove,]
write.csv(exprM3, file="MMRF_CoMMpass_IA13a_E74GTF_Salmon_unique_Gene_symbol_TPM_filter_low.csv", row.names=T)

