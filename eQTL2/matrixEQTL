# matrixEQTL

# have to run this using ESSOS
args <- commandArgs(TRUE)

library(MASS)
library(MatrixEQTL)
useModel = modelLINEAR ;
pvOutputThreshold_cis = 1e-5;
pvOutputThreshold_tra = 1e-8;
cisDist = 1e6;

region <- args[1]
#chr = 21
#age = 1
chrs <- as.character( c(1:22))
chrs <- append(chrs, "X")
for (chr in chrs) {
  path_snp <- "/scratch/yu_liu/GTEx/genotype/Archive_GTEX_geno/GTEX/Genotype/"
  snp_file <- "phg000830.v1.GTEx_WGS.genotype-calls-vcf_WholeGenomeSeq_635Ind_PASS_AB02_GQ20_HETX_MISS15_PLINKQC_chr"
  SNP_file_name <- paste0(path_snp, snp_file, chr, ".txt")
  file.exists(SNP_file_name)  
  snp.data<- as.matrix(read.delim(SNP_file_name,header=T,row.names=1, check.names=F)) 

  tmp <- apply(snp.data, 1, function(x) length(which(!is.na(x))))
  maf <- rowSums(snp.data, na.rm=T)/(tmp*2)
  snp.data = snp.data[-which(maf<0.01 | maf>0.99),]
 
  expression_file_name=paste(region, '_expr.txt', sep="")
  file.exists(expression_file_name) 
  cov_file_name = paste(region, '_covariate.txt', sep="")
  file.exists(cov_file_name) 
  gene.data<- as.matrix(read.delim(expression_file_name,header=T,row.names=1, check.names=F))
  cov.data <- as.matrix(read.delim(cov_file_name, header=T,row.names=1, check.names=F))
  ii <- colnames(gene.data)
  snp.data <- snp.data[,ii]


  dim(snp.data)
  SNP_file_name = paste(region, "_genotype.tmp_chr",chr,".txt", sep="")
  write.table(snp.data, file=SNP_file_name, sep="\t", quote=F)
  snps_location_file_name= paste(path_snp, "phg000830.v1.GTEx_WGS.genotype-calls-vcf_info_chr", chr,".txt", sep="");
  file.exists(snps_location_file_name) 
  gene_location_file_name= paste0('GeneExp_loc_', region, '.txt');
  file.exists(gene_location_file_name) 

  snpspos = read.table(snps_location_file_name, header = TRUE, stringsAsFactors = FALSE);
  genepos = read.table(gene_location_file_name, header = TRUE, stringsAsFactors = FALSE);

  output_file_name_cis=paste("eQTL_MAF1_", region,  "_cis_chr", chr, sep="")
  output_file_name_cis

  snps = SlicedData$new();
  snps$fileDelimiter = "\t"; # the TAB character
  snps$fileOmitCharacters = "NA"; # denote missing values;
  snps$fileSkipRows = 1; # one row of column labels
  snps$fileSkipColumns = 1; # one column of row labels
  snps$fileSliceSize = 2000; # read file in pieces of 2,000 rows
  snps$LoadFile(SNP_file_name);

  gene = SlicedData$new();
  gene$fileDelimiter = "\t"; # the TAB character
  gene$fileOmitCharacters = "NA"; # denote missing values;
  gene$fileSkipRows = 1; # one row of column labels
  gene$fileSkipColumns = 1; # one column of row labels
  gene$fileSliceSize = 2000; # read file in pieces of 2,000 rows
  gene$LoadFile(expression_file_name);


  cvrt = SlicedData$new();
  cvrt$fileDelimiter = "\t"; # the TAB character
  cvrt$fileOmitCharacters = "NA"; # denote missing values;
  cvrt$fileSkipRows = 1; # one row of column labels
  cvrt$fileSkipColumns = 1; # one column of row labels
  cvrt$fileSliceSize = 2000; # read file in pieces of 2,000 rows
  cvrt$LoadFile(cov_file_name);

  me = Matrix_eQTL_main(
    snps = snps,
    gene = gene,
    cvrt = cvrt,
    output_file_name = paste("eQTL_MAF1_", region,  "_chr", chr, "b", sep=""),
    pvOutputThreshold = pvOutputThreshold_tra,
    useModel = useModel,
    verbose = F,
    output_file_name.cis = output_file_name_cis,
    pvOutputThreshold.cis = pvOutputThreshold_cis,
    min.pv.by.genesnp = TRUE,
    snpspos = snpspos,
    genepos = genepos,
    cisDist = cisDist,
    pvalue.hist = TRUE);

  min.pv.gene = me$cis$min.pv.gene
  write.table(min.pv.gene, file=paste("eQTL_MAF1_", region ,"_cis_min.pv.gene_chr", chr, sep=""), quote=F, sep="\t", col.names=F)
  print(paste0(chr, " done!") )

}

